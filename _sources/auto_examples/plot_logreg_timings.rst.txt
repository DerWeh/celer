
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_logreg_timings.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_logreg_timings.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_logreg_timings.py:


==================================================================
Compare LogisticRegression solver with sklearn's liblinear backend
==================================================================

.. GENERATED FROM PYTHON SOURCE LINES 6-68



.. image-sg:: /auto_examples/images/sphx_glr_plot_logreg_timings_001.png
   :alt: plot logreg timings
   :srcset: /auto_examples/images/sphx_glr_plot_logreg_timings_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    file_sizes:   0%|                                   | 0.00/26.8M [00:00<?, ?B/s]    file_sizes:   0%|                           | 24.6k/26.8M [00:00<03:37, 123kB/s]    file_sizes:   0%|                           | 49.2k/26.8M [00:00<03:38, 122kB/s]    file_sizes:   0%|                           | 73.7k/26.8M [00:00<03:38, 122kB/s]    file_sizes:   1%|2                           | 197k/26.8M [00:00<01:24, 315kB/s]    file_sizes:   2%|4                           | 426k/26.8M [00:01<00:43, 612kB/s]    file_sizes:   3%|8                          | 885k/26.8M [00:01<00:22, 1.18MB/s]    file_sizes:   7%|#7                        | 1.80M/26.8M [00:01<00:10, 2.27MB/s]    file_sizes:  14%|###5                      | 3.64M/26.8M [00:01<00:05, 4.41MB/s]    file_sizes:  19%|#####                     | 5.21M/26.8M [00:01<00:03, 5.47MB/s]    file_sizes:  25%|######5                   | 6.78M/26.8M [00:02<00:03, 6.19MB/s]    file_sizes:  31%|########1                 | 8.36M/26.8M [00:02<00:02, 6.68MB/s]    file_sizes:  37%|#########6                | 9.93M/26.8M [00:02<00:02, 7.02MB/s]    file_sizes:  43%|###########1              | 11.5M/26.8M [00:02<00:02, 7.26MB/s]    file_sizes:  49%|############6             | 13.1M/26.8M [00:02<00:01, 7.42MB/s]    file_sizes:  55%|##############2           | 14.6M/26.8M [00:03<00:01, 7.54MB/s]    file_sizes:  61%|###############7          | 16.2M/26.8M [00:03<00:01, 7.62MB/s]    file_sizes:  66%|#################2        | 17.8M/26.8M [00:03<00:01, 7.68MB/s]    file_sizes:  72%|##################8       | 19.4M/26.8M [00:03<00:00, 7.72MB/s]    file_sizes:  78%|####################3     | 20.9M/26.8M [00:03<00:00, 7.74MB/s]    file_sizes:  84%|#####################8    | 22.5M/26.8M [00:04<00:00, 7.77MB/s]    file_sizes:  90%|#######################3  | 24.1M/26.8M [00:04<00:00, 7.78MB/s]    file_sizes:  96%|########################9 | 25.7M/26.8M [00:04<00:00, 7.79MB/s]    file_sizes: 100%|##########################| 26.8M/26.8M [00:04<00:00, 7.17MB/s]    file_sizes: 100%|##########################| 26.8M/26.8M [00:04<00:00, 5.78MB/s]






|

.. code-block:: default


    import time
    import warnings
    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from sklearn import linear_model
    from libsvmdata import fetch_libsvm

    from celer import LogisticRegression

    warnings.filterwarnings("ignore", message="Objective did not converge")
    warnings.filterwarnings("ignore", message="Liblinear failed to converge")

    X, y = fetch_libsvm("news20.binary")

    C_min = 2 / norm(X.T @ y, ord=np.inf)
    C = 20 * C_min


    def pobj_logreg(w):
        return np.sum(np.log(1 + np.exp(-y * (X @ w)))) + 1. / C * norm(w, ord=1)


    pobj_celer = []
    t_celer = []

    for n_iter in range(10):
        t0 = time.time()
        clf = LogisticRegression(
            C=C, solver="celer-pn", max_iter=n_iter, tol=0).fit(X, y)
        t_celer.append(time.time() - t0)
        w_celer = clf.coef_.ravel()
        pobj_celer.append(pobj_logreg(w_celer))

    pobj_celer = np.array(pobj_celer)


    pobj_libl = []
    t_libl = []

    for n_iter in np.arange(0, 50, 10):
        t0 = time.time()
        clf = linear_model.LogisticRegression(
            C=C, solver="liblinear", penalty='l1', fit_intercept=False,
            max_iter=n_iter, random_state=0, tol=1e-10).fit(X, y)
        t_libl.append(time.time() - t0)
        w_libl = clf.coef_.ravel()
        pobj_libl.append(pobj_logreg(w_libl))

    pobj_libl = np.array(pobj_libl)

    p_star = min(pobj_celer.min(), pobj_libl.min())

    plt.close("all")
    fig = plt.figure(figsize=(4, 2), constrained_layout=True)
    plt.semilogy(t_celer, pobj_celer - p_star, label="Celer-PN")
    plt.semilogy(t_libl, pobj_libl - p_star, label="liblinear")
    plt.legend()
    plt.xlabel("Time (s)")
    plt.ylabel("objective suboptimality")
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  16.616 seconds)


.. _sphx_glr_download_auto_examples_plot_logreg_timings.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_logreg_timings.py <plot_logreg_timings.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_logreg_timings.ipynb <plot_logreg_timings.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
